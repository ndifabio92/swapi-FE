{"version":3,"file":"static/js/59.a891af98.chunk.js","mappings":"+LA2CA,UAlCkB,SAAHA,GAAe,IAAVC,EAAGD,EAAHC,IAChBC,GAA+BC,EAAAA,EAAAA,GAAeF,GAAvCG,EAAIF,EAAJE,KAAMC,EAAOH,EAAPG,QAGb,OAH2BH,EAALI,QACXC,EAAAA,EAAAA,GAAU,QAAS,QAAS,iCAGnCC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAEQL,GAAUG,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,UAAWP,KACzBQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBJ,SAAA,EACjCG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BJ,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,WAAWC,KAAKC,EAAAA,EAAAA,GAAS,QAASZ,EAAKa,OAAQC,IAAKd,EAAKe,QACxEN,EAAAA,EAAAA,MAAAJ,EAAAA,SAAA,CAAAC,SAAA,EACIG,EAAAA,EAAAA,MAACO,EAAAA,EAAU,CAACN,UAAU,cAAaJ,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iBAAmB,IAAEN,EAAKiB,iBAEpCR,EAAAA,EAAAA,MAACO,EAAAA,EAAU,CAACN,UAAU,cAAaJ,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,aAAe,IAAEN,EAAKkB,aAEhCT,EAAAA,EAAAA,MAACO,EAAAA,EAAU,CAACN,UAAU,cAAaJ,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,cAAgB,IAAEN,EAAKmB,mBAIzCf,EAAAA,EAAAA,KAAA,OAAKM,UAAU,oBAAmBJ,UAC9BF,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACN,UAAU,cAAaJ,SAC9BN,EAAKoB,sBAOtC,C,mECVA,IA7BuB,SAACvB,GACpB,IAAAwB,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BrB,EAAIuB,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA8BJ,EAAAA,EAAAA,WAAS,GAAKK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAArCzB,EAAO0B,EAAA,GAAEC,EAAUD,EAAA,GAC1BE,GAA0BP,EAAAA,EAAAA,UAAS,MAAKQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAjC3B,EAAK4B,EAAA,GAAEC,EAAQD,EAAA,GAuBtB,OArBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAArC,GAAAsC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGK,OAHLF,EAAAC,KAAA,EAEVd,GAAW,GACXG,EAAS,MAAMU,EAAAE,KAAA,EAEQC,MAAM/C,GAAK,KAAD,EAAnB,OAARyC,EAAQG,EAAAI,KAAAJ,EAAAE,KAAA,EACSL,EAASQ,OAAO,KAAD,EAAhCP,EAAQE,EAAAI,KAEdpB,EAAQc,GACRX,GAAW,GAAOa,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAGlBO,QAAQ9C,MAAKuC,EAAAM,IACbhB,EAAQU,EAAAM,IACRnB,GAAW,GAAO,yBAAAa,EAAAQ,OAAA,GAAAZ,EAAA,mBAEzB,kBAhBc,OAAAzC,EAAAsD,MAAA,KAAAC,UAAA,KAkBflB,GACJ,GAAG,IACI,CAAEjC,KAAAA,EAAMC,QAAAA,EAASC,MAAAA,EAC5B,C","sources":["components/movies/ItemMovie.jsx","hooks/useApiGetByUrl.js"],"sourcesContent":["import React from 'react'\nimport useApiGetByUrl from '../../hooks/useApiGetByUrl';\nimport {Typography} from '@mui/material';\nimport {getImage} from '../../utils/getImage';\nimport Loader from \"../ui/Loader/Loader\";\nimport {swalAlert} from \"../../utils/alert\";\n\nimport './styles/itemMovie.css';\n\nconst ItemMovie = ({url}) => {\n    const {data, loading, error} = useApiGetByUrl(url);\n    if (error) swalAlert('error', 'Error', 'The API call attempt failed.');\n\n    return (\n        <>\n            {\n                loading ? <Loader isLoading={loading}/> :\n                    <div className=\"container-item-movie\">\n                        <div className='container-img-description'>\n                            <img className=\"img-card\" src={getImage(\"films\", data.title)} alt={data.name}/>\n                            <>\n                                <Typography className=\"description\">\n                                    <span>Release Date</span> {data.release_date}\n                                </Typography>\n                                <Typography className=\"description\">\n                                    <span>Director</span> {data.director}\n                                </Typography>\n                                <Typography className=\"description\">\n                                    <span>Producers</span> {data.producer}\n                                </Typography>\n                            </>\n                        </div>\n                        <div className='container-opening'>\n                            <Typography className=\"description\">\n                                {data.opening_crawl}\n                            </Typography>\n                        </div>\n                    </div>\n            }\n        </>\n    )\n}\n\nexport default ItemMovie\n","import { useState, useEffect } from 'react';\n\nconst useApiGetByUrl = (url) => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n\n                const response = await fetch(url);\n                const jsonData = await response.json();\n\n                setData(jsonData);\n                setLoading(false);\n\n            } catch (error) {\n                console.error(error);\n                setError(error);\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n    return { data, loading, error };\n};\n\nexport default useApiGetByUrl;"],"names":["_ref","url","_useApiGetByUrl","useApiGetByUrl","data","loading","error","swalAlert","_jsx","_Fragment","children","Loader","isLoading","_jsxs","className","src","getImage","title","alt","name","Typography","release_date","director","producer","opening_crawl","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","setLoading","_useState5","_useState6","setError","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","jsonData","wrap","_context","prev","next","fetch","sent","json","t0","console","stop","apply","arguments"],"sourceRoot":""}