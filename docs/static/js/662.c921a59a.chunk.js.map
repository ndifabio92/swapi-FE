{"version":3,"file":"static/js/662.c921a59a.chunk.js","mappings":"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","sources":["components/planets/ItemPlanet.jsx","hooks/useApiGetByUrl.js"],"sourcesContent":["import React from 'react'\nimport useApiGetByUrl from '../../hooks/useApiGetByUrl';\nimport { Typography } from '@mui/material';\nimport { getImage } from '../../utils/getImage';\nimport {swalAlert} from \"../../utils/alert\";\n\nimport './styles/itemPlanet.css'\n\nconst ItemPlanet = ({ url }) => {\n    const { data, loading, error } = useApiGetByUrl(url);\n    if (error) swalAlert('error', 'Error', 'The API call attempt failed.');\n    return (\n        <div className='container-planet'>\n            <div className=\"container-img\">\n                <img className=\"img-card\" src={getImage(\"planets\", data.name)} alt={data.name} />\n            </div>\n            <div className='container-planet-description'>\n                <Typography className=\"title\">{data.name}</Typography>\n                <Typography className=\"description\">\n                    <span>Rotation Period</span> {data.rotation_period}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Orbital Period</span> {data.orbital_period}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Diameter</span> {data.diameter}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Climate</span> {data.climate}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Gravity</span> {data.gravity}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Terrain</span> {data.terrain}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Water</span> {data.surface_water}\n                </Typography>\n                <Typography className=\"description\">\n                    <span>Population</span> {data.population}\n                </Typography>\n            </div>\n        </div>\n    )\n}\n\nexport default ItemPlanet;","import { useState, useEffect } from 'react';\n\nconst useApiGetByUrl = (url) => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n\n                const response = await fetch(url);\n                const jsonData = await response.json();\n\n                setData(jsonData);\n                setLoading(false);\n\n            } catch (error) {\n                console.error(error);\n                setError(error);\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n    return { data, loading, error };\n};\n\nexport default useApiGetByUrl;"],"names":["_ref","url","_useApiGetByUrl","useApiGetByUrl","data","loading","error","swalAlert","_jsxs","className","children","_jsx","src","getImage","name","alt","Typography","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","setLoading","_useState5","_useState6","setError","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","jsonData","wrap","_context","prev","next","fetch","sent","json","t0","console","stop","apply","arguments"],"sourceRoot":""}